package api

import (
	mockdb "backend-masterclass/db/mock"
	"backend-masterclass/db/sqlc"
	u "backend-masterclass/util"
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"net/url"
	"reflect"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
	"go.uber.org/mock/gomock"
)

// Implements gomock.Matcher so that we're able to an argument with a password hash to createUserParams coming from the request body, containing a password.
type eqCreateUserParamsMatcher struct {
	arg      sqlc.CreateUserParams
	password string
}

// We need to use bcrypt in order to check for a match between a password and a hash.
// x is the input we want to compare to a test argument which is created in the test stub.
func (e eqCreateUserParamsMatcher) Matches(x any) bool {
	arg, ok := x.(sqlc.CreateUserParams)
	if !ok {
		return false
	}

	err := u.CheckPassword(e.password, arg.HashedPassword)
	if err != nil {
		return false
	}

	// After checking the password, we add the hash to the argument and now we can compare the argument and the parameter x which comes from the request body.
	e.arg.HashedPassword = arg.HashedPassword
	return reflect.DeepEqual(e.arg, arg)
}

func (e eqCreateUserParamsMatcher) String() string {
	return fmt.Sprintf("matches arg %v and password %v", e.arg, e.password)
}

// Takes in the expected value (arg) and a password and returns a matcher object for gomock to use.
func EqCreateUserParams(arg sqlc.CreateUserParams, password string,
) gomock.Matcher {
	return eqCreateUserParamsMatcher{arg, password}
}

func TestCreateUserAPI(t *testing.T) {
	user, password := randomUser()
	// For cases where we want to replace some of the credentials.
	otherUser, otherPassword := randomUser()

	testCases := []struct {
		name string
		// This is what's going to be put into the request body.
		body          createUserRequest
		buildStubs    func(store *mockdb.MockStore)
		checkResponse func(t *testing.T, recorder *httptest.ResponseRecorder)
	}{
		{
			name: "ok",
			body: createUserRequest{
				Username: user.Username,
				Password: password,
				FullName: user.FullName,
				Email:    user.Email,
			},
			buildStubs: func(store *mockdb.MockStore) {
				arg := sqlc.CreateUserParams{
					Username: user.Username,
					FullName: user.FullName,
					Email:    user.Email,
				}

				// The request body will be sent through server.router abd here we require the request body to be the same as what appears in gomock.Eq().
				store.EXPECT().CreateUser(gomock.Any(),
					// password is defined in the beginning of this test function.
					EqCreateUserParams(arg, password)).
					Times(1).
					Return(user, nil)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusOK, recorder.Code)
				requireBodyMatchUser(t, user, recorder.Body)

			},
		},
		{
			// In this case we are simulating an internal error in the database. Since the query was generated by sqlc, we can be sure that the error is due to a problem in the database.
			name: "internal error",
			body: createUserRequest{
				Username: user.Username,
				Password: password,
				FullName: user.FullName,
				Email:    user.Email,
			},
			buildStubs: func(store *mockdb.MockStore) {
				arg := sqlc.CreateUserParams{
					Username: user.Username,
					FullName: user.FullName,
					Email:    user.Email,
				}

				store.EXPECT().CreateUser(gomock.Any(),
					EqCreateUserParams(arg, password)).
					Times(1).
					Return(sqlc.User{}, sqlc.ErrConnection)

				store.EXPECT().TranslateError(gomock.Any()).Times(1).
					Return(sqlc.ErrConnection)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusInternalServerError, recorder.Code)
			},
		},
		{
			// In this case we are simulating a constraint violation error in the database. This is an error on the store (db/mockdb) level.
			name: "duplicate username",
			// This is what will be put into the request body.
			body: createUserRequest{
				Username: user.Username,
				Password: otherPassword,
				FullName: otherUser.FullName,
				Email:    otherUser.Email,
			},
			buildStubs: func(store *mockdb.MockStore) {
				// This is what we set our stub to expect.
				arg := sqlc.CreateUserParams{
					Username: user.Username,
					FullName: otherUser.FullName,
					Email:    otherUser.Email,
				}

				store.EXPECT().CreateUser(gomock.Any(),
					EqCreateUserParams(arg, otherPassword)).
					Times(1).
					Return(sqlc.User{}, sqlc.ErrForbiddenInput)

				store.EXPECT().TranslateError(gomock.Any()).Times(1).
					Return(sqlc.ErrForbiddenInput)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusForbidden, recorder.Code)
			},
		},
		{
			// In this case we are simulating a binding error in the request body. This is an error on the server level.
			name: "invalid email",
			body: createUserRequest{
				Username: user.Username,
				Password: password,
				FullName: user.FullName,
				Email:    "this is an invalid email",
			},
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().CreateUser(gomock.Any(), gomock.Any()).
					Times(0)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusBadRequest, recorder.Code)
			},
		},
		{
			// In this case we are simulating a binding error in the request body. This is an error on the server level.
			name: "password too short",
			body: createUserRequest{
				Username: user.Username,
				Password: "pass",
				FullName: user.FullName,
				Email:    user.Email,
			},
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().CreateUser(gomock.Any(), gomock.Any()).
					Times(0)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusBadRequest, recorder.Code)
			},
		},
		{
			// In this case we are simulating a binding error in the request body. This is an error on the server level.
			name: "invalid username",
			body: createUserRequest{
				// this goes as an uri so we need to escape #.
				Username: url.QueryEscape("0##00"),
				Password: password,
				FullName: user.FullName,
				Email:    user.Email,
			},
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().CreateUser(gomock.Any(), gomock.Any()).
					Times(0)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusBadRequest, recorder.Code)
			},
		},
	}

	for i := range testCases {
		tc := testCases[i]

		t.Run(tc.name, func(t *testing.T) {

			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			store := mockdb.NewMockStore(ctrl)
			// build stubs.
			tc.buildStubs(store)

			// Starting test server and sending request.
			server := NewServer(store)
			recorder := httptest.NewRecorder()

			// We create a json encoder from the reqBody buffer and marshal tc.body into it.
			reqBody := new(bytes.Buffer)
			err := json.NewEncoder(reqBody).Encode(tc.body)
			require.NoError(t, err)

			url := "/users"
			request, err := http.NewRequest(http.MethodPost, url, reqBody)
			require.NoError(t, err)

			// We use the inner ServeHTTP method and not Gin's Run method
			// because we want to use our recorder as a response writer.
			server.Router.ServeHTTP(recorder, request)
			tc.checkResponse(t, recorder)

		})
	}
}

func TestGetUserAPI(t *testing.T) {
	user, _ := randomUser()

	testCases := []struct {
		name          string
		username      string
		buildStubs    func(store *mockdb.MockStore)
		checkResponse func(t *testing.T, recorder *httptest.ResponseRecorder)
	}{
		{
			name:     "ok",
			username: user.Username,
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().GetUser(gomock.Any(), gomock.Eq(user.Username)).
					Times(1).
					Return(user, nil)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusOK, recorder.Code)
				requireBodyMatchUser(t, user, recorder.Body)

			},
		},
		{
			name:     "not found",
			username: user.Username,
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().GetUser(gomock.Any(), gomock.Eq(user.Username)).
					Times(1).
					Return(sqlc.User{}, sqlc.ErrRecordNotFound)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusNotFound, recorder.Code)
			},
		},
		{
			// In this case we are simulating an internal error in the database. Since the query was generated by sqlc, we can be sure that the error is due to a problem in the database.
			name:     "internal error",
			username: user.Username,
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().GetUser(gomock.Any(), gomock.Eq(user.Username)).
					Times(1).
					Return(sqlc.User{}, sql.ErrConnDone)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusInternalServerError, recorder.Code)
			},
		},
		{
			// In this case we are simulating a bad request. The user ID is invalid( should be >=1 ). The query should not be activated.
			name:     "bad request",
			username: "0##00",
			buildStubs: func(store *mockdb.MockStore) {

				// What this means is I expect the GetUser method with any context and any username as the query is to be called 0 times.
				store.EXPECT().GetUser(gomock.Any(), gomock.Any()).
					Times(0)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusBadRequest, recorder.Code)
			},
		},
	}

	for i := range testCases {
		tc := testCases[i]

		t.Run(tc.name, func(t *testing.T) {

			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			store := mockdb.NewMockStore(ctrl)
			// build stubs.
			tc.buildStubs(store)

			// Starting test server and sending request.
			server := NewServer(store)
			recorder := httptest.NewRecorder()

			// We need take into account the bad request so we need to escape special characters.
			url := fmt.Sprintf("/users/%s", url.QueryEscape(tc.username))
			request, err := http.NewRequest(http.MethodGet, url, nil)
			require.NoError(t, err)

			// We use the inner ServeHTTP method and not Gin's Run method
			// because we want to use our recorder as a response writer.
			server.Router.ServeHTTP(recorder, request)
			tc.checkResponse(t, recorder)

		})
	}
}

func randomUser() (sqlc.User, string) {
	password := u.RandomPassword()
	return sqlc.User{
		Username:          u.RandomUsername(),
		FullName:          u.RandomFullName(),
		Email:             u.RandomEmail(),
		PasswordChangedAt: time.Now(),
		CreatedAt:         time.Now(),
	}, password
}

func requireBodyMatchUser(t *testing.T,
	user sqlc.User,
	body *bytes.Buffer,
) {
	data, err := io.ReadAll(body)
	require.NoError(t, err)

	var gotUser sqlc.User
	err = json.Unmarshal(data, &gotUser)
	require.NoError(t, err)
	require.Equal(t, user.Username, gotUser.Username)
	require.Equal(t, user.FullName, gotUser.FullName)
	require.Equal(t, user.HashedPassword, gotUser.HashedPassword)
	require.Equal(t, user.FullName, gotUser.FullName)
	// There might be a short delay from creation of the random user
	// to its storage in the DB and we don't this to fail the test.
	require.WithinDuration(t, user.PasswordChangedAt, gotUser.PasswordChangedAt, time.Second)
	require.WithinDuration(t, user.CreatedAt, gotUser.CreatedAt, time.Second)
}
