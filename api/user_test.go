package api

import (
	mockdb "backend-masterclass/db/mock"
	"backend-masterclass/db/sqlc"
	u "backend-masterclass/util"
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
	"go.uber.org/mock/gomock"
)

func TestGetUserAPI(t *testing.T) {
	user := randomUser()

	testCases := []struct {
		name          string
		username      string
		buildStubs    func(store *mockdb.MockStore)
		checkResponse func(t *testing.T, recorder *httptest.ResponseRecorder)
	}{
		{
			name:     "ok",
			username: user.Username,
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().GetUser(gomock.Any(), gomock.Eq(user.Username)).
					Times(1).
					Return(user, nil)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusOK, recorder.Code)
				requireBodyMatchUser(t, user, recorder.Body)

			},
		},
		{
			name:     "not found",
			username: user.Username,
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().GetUser(gomock.Any(), gomock.Eq(user.Username)).
					Times(1).
					Return(sqlc.User{}, sqlc.ErrRecordNotFound)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusNotFound, recorder.Code)
			},
		},
		{
			// In this case we are simulating an internal error in the database. Since the query was generated by sqlc, we can be sure that the error is due to a problem in the database.
			name:     "internal error",
			username: user.Username,
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().GetUser(gomock.Any(), gomock.Eq(user.Username)).
					Times(1).
					Return(sqlc.User{}, sql.ErrConnDone)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusInternalServerError, recorder.Code)
			},
		},
		{
			// In this case we are simulating a bad request. The user ID is invalid( should be >=1 ). The query should not be activated.
			name:     "bad request",
			username: "0##00",
			buildStubs: func(store *mockdb.MockStore) {

				// What this means is I expect the GetUser method with any context and any username as the query is to be called 0 times.
				store.EXPECT().GetUser(gomock.Any(), gomock.Any()).
					Times(0)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusBadRequest, recorder.Code)
			},
		},
	}

	for i := range testCases {
		tc := testCases[i]

		t.Run(tc.name, func(t *testing.T) {

			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			store := mockdb.NewMockStore(ctrl)
			// build stubs.
			tc.buildStubs(store)

			// Starting test server and sending request.
			server := NewServer(store)
			recorder := httptest.NewRecorder()

			// We need take into account the bad request so we need to escape special characters.
			url := fmt.Sprintf("/users/%s", url.QueryEscape(tc.username))
			request, err := http.NewRequest(http.MethodGet, url, nil)
			require.NoError(t, err)

			// We use the inner ServeHTTP method and not Gin's Run method
			// because we want to use our recorder as a response writer.
			server.Router.ServeHTTP(recorder, request)
			tc.checkResponse(t, recorder)

		})
	}
}

func randomUser() sqlc.User {
	hashedPassword, err := u.HashPassword(u.RandomPassword())
	if err != nil {
		log.Println(err)
	}
	return sqlc.User{
		Username:          u.RandomUsername(),
		FullName:          u.RandomFullName(),
		HashedPassword:    hashedPassword,
		Email:             u.RandomEmail(),
		PasswordChangedAt: time.Now(),
		CreatedAt:         time.Now(),
	}
}

func requireBodyMatchUser(t *testing.T,
	user sqlc.User,
	body *bytes.Buffer,
) {
	data, err := io.ReadAll(body)
	require.NoError(t, err)

	var gotUser sqlc.User
	err = json.Unmarshal(data, &gotUser)
	require.NoError(t, err)
	require.Equal(t, user.Username, gotUser.Username)
	require.Equal(t, user.FullName, gotUser.FullName)
	require.Equal(t, user.HashedPassword, gotUser.HashedPassword)
	require.Equal(t, user.FullName, gotUser.FullName)
	// There might be a short delay from creation of the random user
	// to its storage in the DB and we don't this to fail the test.
	require.WithinDuration(t, user.PasswordChangedAt, gotUser.PasswordChangedAt, time.Second)
	require.WithinDuration(t, user.CreatedAt, gotUser.CreatedAt, time.Second)
}
