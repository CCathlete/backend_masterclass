package api

import (
	mockdb "backend-masterclass/db/mock"
	"backend-masterclass/db/sqlc"
	u "backend-masterclass/util"
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
	"go.uber.org/mock/gomock"
)

func TestGetAccountAPI(t *testing.T) {
	account := randomAccount()

	testCases := []struct {
		name          string
		accountId     int64
		buildStubs    func(store *mockdb.MockStore)
		checkResponse func(t *testing.T, recorder *httptest.ResponseRecorder)
	}{
		{
			name:      "ok",
			accountId: account.ID,
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account.ID)).
					Times(1).
					Return(account, nil)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusOK, recorder.Code)
				requireBodyMatchAccount(t, account, recorder.Body)

			},
		},
		{
			name:      "not found",
			accountId: account.ID,
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account.ID)).
					Times(1).
					Return(sqlc.Account{}, sql.ErrNoRows)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusNotFound, recorder.Code)
			},
		},
		{
			// In this case we are simulating an internal error in the database. Since the query was generated by sqlc, we can be sure that the error is due to a problem in the database.
			name:      "internal error",
			accountId: account.ID,
			buildStubs: func(store *mockdb.MockStore) {

				store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account.ID)).
					Times(1).
					Return(sqlc.Account{}, sql.ErrConnDone)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusInternalServerError, recorder.Code)
			},
		},
		{
			// In this case we are simulating a bad request. The account ID is invalid( should be >=1 ). The query should not be activated.
			name:      "bad request",
			accountId: -1,
			buildStubs: func(store *mockdb.MockStore) {

				// What this means is I expect the GetAccount method with any context and any account ID as the query id to be called 0 times.
				store.EXPECT().GetAccount(gomock.Any(), gomock.Any()).
					Times(0)

			},
			checkResponse: func(t *testing.T, recorder *httptest.ResponseRecorder) {

				require.Equal(t, http.StatusBadRequest, recorder.Code)
			},
		},
	}

	for i := range testCases {
		tc := testCases[i]

		t.Run(tc.name, func(t *testing.T) {

			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			store := mockdb.NewMockStore(ctrl)
			// build stubs.
			tc.buildStubs(store)

			// Starting test server and sending request.
			server := NewServer(store)
			recorder := httptest.NewRecorder()

			url := fmt.Sprintf("/accounts/%d", tc.accountId)
			request, err := http.NewRequest(http.MethodGet, url, nil)
			require.NoError(t, err)

			// We use the inner ServeHTTP method and not Gin's Run method
			// because we want to use our recorder as a response writer.
			server.Router.ServeHTTP(recorder, request)
			tc.checkResponse(t, recorder)

		})
	}
}

func randomUser() sqlc.User {
	return sqlc.User{
		Username:          u.RandomUsername(),
		FullName:          u.RandomOwner(),
		HashedPassword:    u.RandomOwner(),
		Email:             u.RandomEmail(),
		PasswordChangedAt: time.Now(),
		CreatedAt:         time.Now(),
	}
}

func randomAccount() sqlc.Account {
	user := randomUser()

	return sqlc.Account{
		ID:       u.RandomInt(1, 100),
		Owner:    user.Username,
		Balance:  u.RandomMoney(),
		Currency: u.RandCurrency(),
	}
}

func requireBodyMatchAccount(t *testing.T,
	account sqlc.Account,
	body *bytes.Buffer,
) {
	data, err := io.ReadAll(body)
	require.NoError(t, err)

	var gotAccount sqlc.Account
	err = json.Unmarshal(data, &gotAccount)
	require.NoError(t, err)
	require.Equal(t, account, gotAccount)
}
